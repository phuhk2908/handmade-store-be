// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  password      String
  role          Role           @default(CUSTOMER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  address       Address?
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id         String  @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@map("address")
}

model Product {
  id                   String         @id @default(cuid())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  name                 String
  description          String
  price                Decimal        @db.Decimal(10, 2)
  inventory            Int            @default(0)
  images               ProductImage[]
  categoryId           String
  category             Category       @relation(fields: [categoryId], references: [id])
  materials            Material[]     @relation("product_materials")
  reviews              Review[]
  cartItems            CartItem[]
  wishlistItems        WishlistItem[]
  orderItems           OrderItem[]
  tags                 Tag[]          @relation("product_tags")
  isCustomizable       Boolean        @default(false)
  customizationOptions Json?
  weight               Float? // In grams
  dimensions           Json? // {length, width, height} in cm
  isPublished          Boolean        @default(false)

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  altText   String?
  isMain    Boolean @default(false)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  slug        String     @unique
  parentId    String?
  parent      Category?  @relation("category_hierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("category_hierarchy")
  products    Product[]

  @@map("categories")
}

model Material {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[] @relation("product_materials")

  @@map("materials")
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[] @relation("product_tags")

  @@map("tags")
}

model CartItem {
  id            String  @id @default(cuid())
  quantity      Int
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  customization Json?

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  status            OrderStatus   @default(PENDING)
  totalAmount       Decimal       @db.Decimal(10, 2)
  items             OrderItem[]
  shippingAddressId String?
  shippingAddress   Address?      @relation(fields: [shippingAddressId], references: [id])
  paymentIntentId   String?       @unique
  paymentStatus     PaymentStatus @default(PENDING)
  trackingNumber    String?
  shippingMethod    String?
  notes             String?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal @db.Decimal(10, 2)
  customization Json?

  @@map("order_items")
}

model Review {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  rating    Int // 1-5 stars
  comment   String?
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  images    ReviewImage[]

  @@unique([userId, productId])
  @@map("reviews")
}

model ReviewImage {
  id       String @id @default(cuid())
  url      String
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_images")
}
